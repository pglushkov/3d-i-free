

        16 Jun 2014

0) Create some decent structure in repository (sort of done ...)
1) Remove all fixed-pipeline-related code ( glBegin() ... glEnd() ) (done)
2) Draw a square as array of vertices (done)
3) Draw a flag on the square with fragment shader (done)


        12 Aug 2014
1) Work on Camera_move_example:
        - fix bugs with left/right movement (done)
        - place light source in camera (done)
        - play with light direction relatively to camera position (done)

        26 Aug 2014
!!!!!!!!!!!!!!!!!!!!!
	0.1) SEEMS LIKE YOUR ROTATION MATRICES HAVE WRONG ORIENTATION COLUMN-ROW-WISE! FIX IT!!!!
		- Fixed for example 'keyboard_rotate'!
		- Make same thing for 'camera_move' example, cause for now it expects old broken type of rotation
		matrices, while they've been fixed to correct ones!!! (done)

			RESOLUTION NOTE: camera's defaul coordinates space is a bit inverse to worlds one, i.e.
			camera's Z and X axis are alligned with worlds' -Z and -X axis correspondinglyi

	0.2) STILL HAVE NO CLUE, WHY WE SEE SUCH PERVERTED PICTURE WHEN NOT USING PROJECTION MATRIX !!!!
		- when we use projection matrix we have classic right-handed coordinate-system, i.e. Z points 'out of
		the monitor', X points right, Y points up
		- when NOT using projection matrix - Z axis seems inverted. WTF?!?!?!?
!!!!!!!!!!!!!!!!!!!!!

1) Fix MyWorld::default_material
2) finish material-related refactoring
3) create separate class for the camera!


	8 Sep 2014
1) ALL FUCKED UP AGAIN ...
	- see throughly through links in SOME_LINKS.txt at corresponding 'paragraph'
	- define how matrix is passed to the shader depending on 'transpose' flag
	- define how new basis vectors are located in transform matrix (col or row based) and bind it with glUnifirmMatrix4fv
	- fix the damn rotation-generation routines ...


	9 Sep 2014
1) Create a workbench example for further debug and Subman:
	- mostly C with a little C++
	- must have at least: shader creation, vertex array creation, texturing, uniforms, transforms, all for now ...
2) Enable core-files and debug CustomUniformHolder (done)

	10 Sep 2014
1) Create a workbench example for further debug and Subman:
	- mostly C with a little C++ (done)
	- must have at least: shader creation, vertex array creation, texturing, uniforms, transforms, all for now (most
			of it is done)
2) Debug actual matrix passage to GPU using custom uniforms mechanism

	11 Sep 2014
1) Add projection to 'get_started_example' (yet delayed, need to finish research)
2) Debug actual matrix transfer to GPU (done, it plainly sucks!)
3) Fix the f'ing rotations !!! (in progress)

	14 Sep 2014
1) First find out - why Z axis is 'inverted' when not using projection matrix
2) Then fix the rotations
3) Add some explanations on what is actually going on with and without projection to get_started_example



